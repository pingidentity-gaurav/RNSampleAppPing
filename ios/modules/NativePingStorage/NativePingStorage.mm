//
//  NativePingStorage.m
//  RNSampleApp
//
//  Created by Thais Damasceno on 2025-09-18.
//

//TurboWrapper


#import <string>
#import "RCTDefaultReactNativeFactoryDelegate.h"
#import "NativePingStorage.h"
#include <Foundation/Foundation.h>

#import <React/RCTBridgeModule.h>
#import <ReactCommon/RCTTurboModule.h>

// Generated by RN codegen
//#import "NativePingStorage.h"

// Auto-generated Swift header for your iOS target
#import "RNSampleApp-Swift.h"

using namespace facebook::react;

@interface NativePingStorage() <NativePingStorageSpec>
@property (nonatomic, strong) NativePingStorageModule *translator;

@end


@implementation NativePingStorage



- (instancetype)init {
  if ((self = [super init])) {
    NSLog(@"NativePingStorage: init called");
    _translator = [NativePingStorageModule new];
  }
  return self;
}


// Factory required by TurboModules
- (std::shared_ptr<TurboModule>)getTurboModule:(const ObjCTurboModule::InitParams &)params {
  NSLog(@"NativePingStorage: getTurboModule called");
  return std::make_shared<NativePingStorageSpecJSI>(params);
}

static inline NSString *toNSString(const std::string &str) {
  return [NSString stringWithUTF8String:str.c_str()];
}

// ===== Spec methods =====

// configure(config: StorageConfig): Promise<boolean>
- (void)configure:(JS::NativePingStorage::StorageConfig &)config
          resolve:(RCTPromiseResolveBlock)resolve
           reject:(RCTPromiseRejectBlock)reject
{
  NSLog(@"NativePingStorage: configure called");
  NSMutableDictionary *configDict = [NSMutableDictionary new];
  
  NSString *type = config.type();
  if (type) {
    configDict[@"type"] = type;
    NSLog(@"NativePingStorage: config.type = %@", type);
  }
  
  NSString *fileName = config.fileName();
  if (fileName) {
    configDict[@"filename"] = fileName;
    NSLog(@"NativePingStorage: config.fileName = %@", fileName);
  }
  
  NSString *keyAlias = config.keyAlias();
  if (keyAlias) {
    configDict[@"keyAlias"] = keyAlias;
    NSLog(@"NativePingStorage: config.keyAlias = %@", keyAlias);
  }
  
  NSString *cacheStrategy = config.cacheStrategy();
  if (cacheStrategy) {
    configDict[@"cacheStrategy"] = cacheStrategy;
    NSLog(@"NativePingStorage: config.cacheStrategy = %@", cacheStrategy);
  }
  
  [self.translator configure:configDict];
  NSLog(@"NativePingStorage: configure finished, resolving");
  resolve(@(YES));
}


// save(item: Object): Promise<boolean>
- (void)save:(NSDictionary *)item
     resolve:(RCTPromiseResolveBlock)resolve
      reject:(RCTPromiseRejectBlock)reject
{
  NSLog(@"NativePingStorage: save called with item: %@", item);
  [self.translator save:item completion:^(NSNumber * _Nullable ok, NSError * _Nullable error) {
    if (error) {
      NSLog(@"NativePingStorage: save error: %@", error);
      reject(@"pingstorage_save_error", error.localizedDescription, error);
    } else {
      NSLog(@"NativePingStorage: save success");
      resolve(ok ?: @(NO));
    }
  }];
}


// get(): Promise<Object | null>
- (void)get:(RCTPromiseResolveBlock)resolve
     reject:(RCTPromiseRejectBlock)reject
{
  NSLog(@"NativePingStorage: get called");
  [self.translator get:^(id _Nullable value, NSError * _Nullable error) {
    if (error) {
      NSLog(@"NativePingStorage: get error: %@", error);
      reject(@"pingstorage_get_error", error.localizedDescription, error);
    } else {
      NSLog(@"NativePingStorage: get success, value: %@", value);
      resolve(value ?: [NSNull null]);
    }
  }];
}


// remove(): Promise<boolean>
- (void)remove:(RCTPromiseResolveBlock)resolve
        reject:(RCTPromiseRejectBlock)reject
{
  NSLog(@"NativePingStorage: remove called");
  [self.translator remove:^(NSNumber * _Nullable ok, NSError * _Nullable error) {
    if (error) {
      NSLog(@"NativePingStorage: remove error: %@", error);
      reject(@"pingstorage_remove_error", error.localizedDescription, error);
    } else {
      NSLog(@"NativePingStorage: remove success");
      resolve(ok ?: @(NO));
    }
  }];
}


// Module name used by RN (matches TurboModuleRegistry.getEnforcing(...))
+ (NSString *)moduleName
{
  NSLog(@"NativePingStorage: moduleName called");
  return @"NativePingStorage";
}

// ===== Journey Methods =====

- (void)configureJourney:(NSDictionary *)config
                 resolve:(RCTPromiseResolveBlock)resolve
                  reject:(RCTPromiseRejectBlock)reject
{
  NSLog(@"NativePingStorage: configureJourney called with config: %@", config);
  [self.translator configureJourney:config completion:^(NSNumber * _Nullable ok, NSError * _Nullable error) {
    if (error) {
      
      reject(@"pingjourney_configure_error", error.localizedDescription, error);
    } else {
      resolve(ok ?: @(YES));
    }
  }];
}

- (void)start:(NSString *)journeyName
      options:(JS::NativePingStorage::JourneyOptions &)options
      resolve:(RCTPromiseResolveBlock)resolve
       reject:(RCTPromiseRejectBlock)reject
{
  NSLog(@"NativePingStorage: start called with journeyName: %@", journeyName);
  
  NSMutableDictionary *opts = [NSMutableDictionary new];
  if (options.forceAuth()) opts[@"forceAuth"] = @(options.forceAuth().value());
  if (options.noSession()) opts[@"noSession"] = @(options.noSession().value());
  
  [self.translator start:journeyName
                 options:opts
              completion:^(NSDictionary * _Nullable node, NSError * _Nullable error) {
    if (error) {
      reject(@"pingjourney_start_error", error.localizedDescription, error);
    } else {
      resolve(node ?: @{});
    }
  }];
}

- (void)next:(NSString *)nodeId
       input:(NSDictionary *)input
     resolve:(RCTPromiseResolveBlock)resolve
      reject:(RCTPromiseRejectBlock)reject
{
  NSLog(@"NativePingStorage: next called with nodeId: %@", nodeId);
  [self.translator next:nodeId
                  input:input
             completion:^(NSDictionary * _Nullable node, NSError * _Nullable error) {
    if (error) {
      reject(@"pingjourney_next_error", error.localizedDescription, error);
    } else {
      resolve(node ?: @{});
    }
  }];
}

- (void)resume:(NSString *)uri
       resolve:(RCTPromiseResolveBlock)resolve
        reject:(RCTPromiseRejectBlock)reject
{
  NSLog(@"NativePingStorage: resume called with uri: %@", uri);
  [self.translator resume:uri completion:^(NSDictionary * _Nullable node, NSError * _Nullable error) {
    if (error) {
      reject(@"pingjourney_resume_error", error.localizedDescription, error);
    } else {
      resolve(node ?: @{});
    }
  }];
}

- (void)getSession:(RCTPromiseResolveBlock)resolve
            reject:(RCTPromiseRejectBlock)reject
{
  NSLog(@"NativePingStorage: getSession called");
  [self.translator getSession:^(NSDictionary * _Nullable session, NSError * _Nullable error) {
    if (error) {
      reject(@"pingjourney_getsession_error", error.localizedDescription, error);
    } else {
      resolve(session ?: [NSNull null]);
    }
  }];
}

- (void)logout:(RCTPromiseResolveBlock)resolve
        reject:(RCTPromiseRejectBlock)reject
{
  NSLog(@"NativePingStorage: logout called");
  [self.translator logout:^(NSNumber * _Nullable ok, NSError * _Nullable error) {
    if (error) {
      reject(@"pingjourney_logout_error", error.localizedDescription, error);
    } else {
      resolve(ok ?: @(YES));
    }
  }];
}


@end
