//
//  RCTNativePingStorage.m
//  RNSampleApp
//
//  Created by Thais Damasceno on 2025-09-17.
//

#import "RCTDefaultReactNativeFactoryDelegate.h"
#import "RCTNativePingStorage.h"
#import <React/RCTBridgeModule.h>
#import <React/RCTConvert.h>
#import <React/RCTEventEmitter.h>
#import "NativePingStorageSpec.h"
# import "RNSampleApp-Swift.h" // Autogenerated Swift bridge header


@interface RCTNativePingStorage () <NativePingStorageSpec>
@end

@implementation RCTNativePingStorage {
    RCTNativePingStorageBridge *_bridge;
}

+ (BOOL)requiresMainQueueSetup {
    return NO;
}

// Export module using the legacy approach for compatibility
+ (NSString *)moduleName {
    return @"NativePingStorage";
}

- (instancetype)init {
    if (self = [super init]) {
        _bridge = [RCTNativePingStorageBridge new];
        NSLog(@"Initialized RCTNativePingStorage with bridge: %@", _bridge);
    }
    return self;
}

// Protocol method implementations
- (void)configure:(NSDictionary *)config
         resolve:(RCTPromiseResolveBlock)resolve
         reject:(RCTPromiseRejectBlock)reject
{
  [_bridge configure:config resolve:^(BOOL result) {

    NSLog(@"Configuration result: %d", result);
    resolve(@(result));

  } reject:^(NSString *code, NSString *message, NSError *error) {
    reject(code, message, error);
  }];
}

- (void)save:(NSDictionary *)item
     resolve:(RCTPromiseResolveBlock)resolve
     reject:(RCTPromiseRejectBlock)reject
{
  NSLog(@"RCTNativePingStorage: save method called with item: %@", item);
  NSLog(@"RCTNativePingStorage: bridge instance: %@", _bridge);
  
  [_bridge save:item resolve:^(BOOL result) {

    NSLog(@"RCTNativePingStorage: Save completed with result: %d", result);

    resolve(@(result));

  } reject:^(NSString *code, NSString *message, NSError *error) {
    NSLog(@"RCTNativePingStorage: Save failed with error: %@ - %@", code, message);
    reject(code, message, error);
  }];
}

- (void)get:(RCTPromiseResolveBlock)resolve
    reject:(RCTPromiseRejectBlock)reject
{
  [_bridge get:^(NSDictionary *result) {

    resolve(result ?: (id)kCFNull);

  } reject:^(NSString *code, NSString *message, NSError *error) {
    reject(code, message, error);
  }];
}

- (void)remove:(RCTPromiseResolveBlock)resolve
       reject:(RCTPromiseRejectBlock)reject
{
  [_bridge remove:^(BOOL result) {

    resolve(@(result));

  } reject:^(NSString *code, NSString *message, NSError *error) {
    reject(code, message, error);
  }];
}

@end
